.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GLARK 1"
.TH GLARK 1 "2005-06-24" "glark 1.7.4" "glark 1.7.4"
.SH "NAME"
glark \- Search text files for complex regular expressions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBglark\fR [options] expression file ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Similar to \f(CW\*(C`grep\*(C'\fR, \f(CW\*(C`glark\*(C'\fR offers: Perl-compatible regular expressions, color
highlighting of matches, context around matches, complex expressions (\*(L"and\*(R" and
\&\*(L"or\*(R"), grep output emulation, and automatic exclusion of non-text files. Its
regular expressions should be familiar to persons experienced in Perl, Python,
or Ruby. File may also be a list of files in the form of a path.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "Input"
.IX Subsection "Input"
.RS 4
.IP "\fB\-0[nnn]\fR" 4
.IX Item "-0[nnn]"
Use \ennn (octal) as the input record separator. If nnn is omitted, use '\en\en' as
the record separator, which treats paragraphs as lines.
.IP "\fB\-d \s-1ACTION\s0\fR, \fB\-\-directories=ACTION\fR" 4
.IX Item "-d ACTION, --directories=ACTION"
Directories are processed according to the given \fI\s-1ACTION\s0\fR, which by default is
\&\f(CW\*(C`read\*(C'\fR. If \fI\s-1ACTION\s0\fR is \f(CW\*(C`recurse\*(C'\fR, each file in the directory is read and each
subdirectory is recursed into (equivalent to the \-r option). If \fI\s-1ACTION\s0\fR is
\&\f(CW\*(C`skip\*(C'\fR, directories are not read, and no message is produced.
.IP "\fB\-\-binary\-files=TYPE\fR" 4
.IX Item "--binary-files=TYPE"
Specify how to handle binary files, thus overriding the default behavior, which
is to denote the binary files that match the expression, without displaying the
match. \fI\s-1TYPE\s0\fR may be one of: \f(CW\*(C`binary\*(C'\fR, the default; \f(CW\*(C`without\-match\*(C'\fR, which
results in binary files being skipped; and \f(CW\*(C`text\*(C'\fR, which results in the binary
file being treated as text, the display of which may have bad side effects with
the terminal. Note that the default behavior has changed; this previously was to
skip binary files. The same effect may be achieved by setting \fBbinary-files\fR to
\&\f(CW\*(C`without\-match\*(C'\fR in the ~/.glarkrc file.
.IP "\fB\-\-basename \s-1EXPR\s0\fR, \fB\-\-name \s-1EXPR\s0\fR" 4
.IX Item "--basename EXPR, --name EXPR"
Search only files whose names match the given regular expression. As in \fIfind\fR\|(1),
this works on the basename of the file. This expression can be negated and
modified with \f(CW\*(C`i\*(C'\fR, such as '/io\e.[hc]$/i'.
.IP "\fB\-\-fullname \s-1EXPR\s0\fR, \fB\-\-path \s-1EXPR\s0\fR" 4
.IX Item "--fullname EXPR, --path EXPR"
Search only files whose names, including path, match the given regular
expression. As in \fIfind\fR\|(1), this works on the path of the file. This expression
can be negated and modified with \f(CW\*(C`i\*(C'\fR, such as '/source/.*/ui/.*widget\e.java/i'.
.IP "\fB\-M\fR, \fB\-\-exclude\-matching\fR" 4
.IX Item "-M, --exclude-matching"
Do not search files whose names match the given expression. This can be useful
for finding external references to a file, or to a class (assuming that class
names match file names).
.IP "\fB\-r\fR, \fB\-\-recurse\fR" 4
.IX Item "-r, --recurse"
Recurse through directories. Equivalent to \-\-directories=read.
.IP "\fB\-\-split\-as\-path(=VALUE)\fR, \fB\-\-no\-split\-as\-path\fR" 4
.IX Item "--split-as-path(=VALUE), --no-split-as-path"
Sets whether, if a command line argument includes the path separator (such as
\&\*(L":\*(R"), the argument should be split by the path separator. This functionality is
useful for using environment variables as input, such as \f(CW$PATH\fR and \f(CW$CLASSPATH\fR,
which are automatically split and processed as a list of files and directories.
The default value of this option is \*(L"true\*(R". The \fI\-\-no\-split\-as\-path\fR is
equivalent to \fI\-\-split\-as\-path=false\fR.
.RE
.RS 4
.RE
.Sh "Matching"
.IX Subsection "Matching"
.RS 4
.IP "\fB\-a\fR \s-1NUM\s0 expr1 expr2" 4
.IX Item "-a NUM expr1 expr2"
.PD 0
.IP "\fB\-\-and\fR \s-1NUM\s0 expr1 expr2" 4
.IX Item "--and NUM expr1 expr2"
.IP "\fB\-\-and=NUM\fR expr1 expr2" 4
.IX Item "--and=NUM expr1 expr2"
.PD
Match both of the two expressions, within \fI\s-1NUM\s0\fR lines of each other. See the
\&\s-1EXPRESSIONS\s0 section for more information.
.IP "\fB\-b NUM[%]\fR, \fB\-\-before NUM[%]\fR" 4
.IX Item "-b NUM[%], --before NUM[%]"
Restrict the search to before the given location, which represents either the
number of the last line within the valid range, or the percentage of lines to be
searched.
.IP "\fB\-\-after NUM[%]\fR" 4
.IX Item "--after NUM[%]"
Restrict the search to after the given section, which represents either the
number of the first line within the valid range, or the percentage of lines to
be skipped.
.IP "\fB\-f \s-1FILE\s0\fR, \fB\-\-file=FILE\fR" 4
.IX Item "-f FILE, --file=FILE"
Use the lines in the given file as expressions. Each line consists of a regular
expression.
.IP "\fB\-i\fR, \fB\-\-ignore\-case\fR" 4
.IX Item "-i, --ignore-case"
Match regular expressions without regard to case. The default is
case sensitive.
.IP "\fB\-m \s-1NUM\s0\fR, \fB\-\-match\-limit \s-1NUM\s0\fR" 4
.IX Item "-m NUM, --match-limit NUM"
Find only the first \fI\s-1NUM\s0\fR matches in each file.
.IP "\fB\-o\fR expr1 expr2" 4
.IX Item "-o expr1 expr2"
.PD 0
.IP "\fB\-\-or\fR expr1 expr2" 4
.IX Item "--or expr1 expr2"
.PD
Match either of the two expressions. See the \s-1EXPRESSIONS\s0 section for more
information.
.IP "\fB\-R\fR, \fB\-\-range NUM[%] NUM[%]\fR" 4
.IX Item "-R, --range NUM[%] NUM[%]"
Restrict the search to the given range of lines.
.IP "\fB\-v\fR, \fB\-\-invert\-match\fR" 4
.IX Item "-v, --invert-match"
Show lines that do not match the expression.
.IP "\fB\-w\fR, \fB\-\-word\fR, \fB\-\-word\-regexp\fR" 4
.IX Item "-w, --word, --word-regexp"
Put word boundaries around each pattern, thus matching only where
the full word(s) occur in the text. Thus, \f(CW\*(C`glark \-w Foo\*(C'\fR is the same
as \f(CW\*(C`glark '/\ebFoo\eb/'\*(C'\fR.
.IP "\fB\-x\fR, \fB\-\-line\-regexp\fR" 4
.IX Item "-x, --line-regexp"
Select only where the entire line matches the pattern(s).
.IP "\fB\-\-xor\fR expr1 expr2" 4
.IX Item "--xor expr1 expr2"
Match either of the two expressions, but not both. See the \s-1EXPRESSIONS\s0 section
for more information.
.RE
.RS 4
.RE
.Sh "Output"
.IX Subsection "Output"
.RS 4
.IP "\fB\-A \s-1NUM\s0\fR, \fB\-\-after\-context=NUM\fR" 4
.IX Item "-A NUM, --after-context=NUM"
Print \fI\s-1NUM\s0\fR lines after a matched expression.
.IP "\fB\-B \s-1NUM\s0\fR, \fB\-\-before\-context=NUM\fR" 4
.IX Item "-B NUM, --before-context=NUM"
Print \fI\s-1NUM\s0\fR lines before a matched expression.
.IP "\fB\-C [\s-1NUM\s0]\fR, \fB\-NUM\fR, \fB\-\-context[=NUM]\fR" 4
.IX Item "-C [NUM], -NUM, --context[=NUM]"
Output \fI\s-1NUM\s0\fR lines of context around a matched expression. The default is no
context. If no \fI\s-1NUM\s0\fR is given for this option, the number of lines of context
is 2.
.IP "\fB\-c\fR, \fB\-\-count\fR" 4
.IX Item "-c, --count"
Instead of normal output, display only the number of matches in each file.
.IP "\fB\-F\fR, \fB\-\-file\-color \s-1COLOR\s0\fR" 4
.IX Item "-F, --file-color COLOR"
Specify the highlight color for file names. See the \s-1HIGHLIGHTING\s0 section for
the values that can be used.
.IP "\fB\-\-no\-filter\fR" 4
.IX Item "--no-filter"
Display the entire file(s), presumably with matches highlighted.
.IP "\fB\-g\fR, \fB\-\-grep\fR" 4
.IX Item "-g, --grep"
Produce output like the grep default: file names, no line numbers, and a single
line of the match, which will be the first line for matches that span multiple
lines. If the \s-1EMACS\s0 environment variable is set, this value is set to true.
Thus, running glark under Emacs results in the output format expected by Emacs.
.IP "\fB\-h\fR, \fB\-\-no\-filename\fR" 4
.IX Item "-h, --no-filename"
Do not display the names of the files that matched.
.IP "\fB\-H\fR, \fB\-\-with\-filename\fR" 4
.IX Item "-H, --with-filename"
Display the names of the files that matched. This is the default
behavior.
.IP "\fB\-l\fR, \fB\-\-files\-with\-matches\fR" 4
.IX Item "-l, --files-with-matches"
Print only the names of the file that matched the expression.
.IP "\fB\-L\fR, \fB\-\-files\-without\-match\fR" 4
.IX Item "-L, --files-without-match"
Print only the names of the file that did not match the expression.
.IP "\fB\-\-label=NAME\fR" 4
.IX Item "--label=NAME"
Use \s-1NAME\s0 as output file name. This is useful when reading from standard input.
.IP "\fB\-n\fR, \fB\-\-line\-number\fR" 4
.IX Item "-n, --line-number"
Display the line numbers. This is the default behavior.
.IP "\fB\-N\fR, \fB\-\-no\-line\-number\fR" 4
.IX Item "-N, --no-line-number"
Do not display the line numbers.
.IP "\fB\-\-line\-number\-color\fR" 4
.IX Item "--line-number-color"
Specify the highlight color for line numbers. This defaults to none (no
highlighting). See the \s-1HIGHLIGHTING\s0 section for more information.
.IP "\fB\-T\fR, \fB\-\-text\-color \s-1COLOR\s0\fR" 4
.IX Item "-T, --text-color COLOR"
Specify the highlight color for text. See the \s-1HIGHLIGHTING\s0 section for more
information.
.IP "\fB\-\-text\-color\-NUM \s-1COLOR\s0\fR" 4
.IX Item "--text-color-NUM COLOR"
Specify the highlight color for the regular expression capture \s-1NUM\s0. Colors are
used by regular expressions in the order they are created (that is, with the
\&\f(CW\*(C`\-\-and\*(C'\fR and \f(CW\*(C`\-\-or\*(C'\fR option), or with captures within a regular expression (such
as '/(this)|(that)/'). is See the \s-1HIGHLIGHTING\s0 section for more information.
.IP "\fB\-u\fR, \fB\-\-highlight=[\s-1FORMAT\s0]\fR" 4
.IX Item "-u, --highlight=[FORMAT]"
Enable highlighting. This is the default behavior. Format is \*(L"single\*(R" (one
color) or \*(L"multi\*(R" (different color per regular expression). See the \s-1HIGHLIGHTING\s0
section for more information.
.IP "\fB\-U\fR, \fB\-\-no\-highlight\fR" 4
.IX Item "-U, --no-highlight"
Disable highlighting.
.IP "\fB\-y\fR, \fB\-\-extract\-matches\fR" 4
.IX Item "-y, --extract-matches"
Display only the region that matched, not the entire line. If the expression
contains \*(L"backreferences\*(R" (i.e., expressions bounded by \*(L"( ... )\*(R"), then only
the portion captured will be displayed, not the entire line. This option is
useful with \f(CW\*(C`\-g\*(C'\fR, which eliminates the default highlighting and display of file
names.
.IP "\fB\-Z\fR, \fB\-\-null\fR" 4
.IX Item "-Z, --null"
When in \fB\-l\fR mode, write file names followed by the \s-1ASCII\s0 \s-1NUL\s0 character ('\e0')
instead of '\en'.
.RE
.RS 4
.RE
.Sh "Debugging/Errors"
.IX Subsection "Debugging/Errors"
.RS 4
.IP "\fB\-?\fR, \fB\-\-help\fR" 4
.IX Item "-?, --help"
Display the help message.
.IP "\fB\-\-config\fR" 4
.IX Item "--config"
Display the settings glark is using, and exit. Since this is run after
configuration files are read, this may be useful for determining values of
configuration parameters.
.IP "\fB\-\-explain\fR" 4
.IX Item "--explain"
Write the expression in a more legible format, useful for debugging.
.IP "\fB\-q\fR, \fB\-s\fR, \fB\-\-quiet\fR, \fB\-\-no\-messages\fR" 4
.IX Item "-q, -s, --quiet, --no-messages"
Suppress warnings.
.IP "\fB\-Q\fR, \fB\-\-no\-quiet\fR" 4
.IX Item "-Q, --no-quiet"
Enable warnings. This is the default.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Display version information.
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
Display normally suppressed output, for debugging purposes.
.RE
.RS 4
.RE
.SH "EXPRESSIONS"
.IX Header "EXPRESSIONS"
.Sh "Regular Expressions"
.IX Subsection "Regular Expressions"
Regular expressions are expected to be in the Perl/Ruby format. \f(CW\*(C`perldoc
perlre\*(C'\fR has more general information. The expression may be of either form:
.PP
.Vb 2
\&    something
\&    /something/
.Ve
.PP
There is no difference between the two forms, except that with the latter, one
can provide the \*(L"ignore case\*(R" modifier, thus matching \*(L"someThing\*(R" and
\&\*(L"SoMeThInG\*(R":
.PP
.Vb 1
\&    % glark /something/i
.Ve
.PP
Note that this is redundant with the \*(L"\-i\*(R" (\*(L"\-\-ignore\-case\*(R") option.
.PP
All regular expression characters and options are available, such as \*(L"\ew\*(R",
\&\*(L".*?\*(R" and \*(L"[^9]\*(R". For example:
.PP
.Vb 1
\&    % glark '\eb[a-z][^\ed]\ed{1,3}.*\es*>>\es*\ed+\es*.*& +\ed{3}'
.Ve
.PP
If the \fBand\fR and \fBor\fR options are not used, the last non-option is considered
to be the expression to be matched. In the following, \*(L"printf\*(R" is used as the
expression.
.PP
.Vb 1
\&    % glark -w printf *.c
.Ve
.PP
\&\s-1POSIX\s0 character classes (e.g., [[:alpha:]]) are also supported.
.Sh "Complex Expressions"
.IX Subsection "Complex Expressions"
Complex expressions combine regular expressions (and complex expressions
themselves) with logical \s-1AND\s0, \s-1OR\s0, and \s-1XOR\s0 operators.
.RS 4
.IP "\fB\-o\fR expr1 expr2" 4
.IX Item "-o expr1 expr2"
.PD 0
.IP "\fB\-\-or\fR expr1 expr2 \fB\-\-end\-of\-or\fR" 4
.IX Item "--or expr1 expr2 --end-of-or"
.PD
Match either of the two expressions. The results of the two forms are
equivalent. In the latter syntax, the \fB\-\-end\-of\-or\fR is optional.
.IP "\fB\-a\fR number expr1 expr2" 4
.IX Item "-a number expr1 expr2"
.PD 0
.IP "\fB\-\-and\fR number expr1 expr2 \fB\-\-end\-of\-and\fR" 4
.IX Item "--and number expr1 expr2 --end-of-and"
.PD
Match both of the two expressions, within <number> lines of each other. As with
the \fBor\fR option, the results of the two forms are equivalent, and the
\&\fB\-\-end\-of\-and\fR is optional. The forms \fB\-aNUM\fR and \fB\-\-and=NUM\fR are also
supported.
.Sp
If the number provided is \-1 (negative one), the distance is considered to be
\&\*(L"infinite\*(R", and thus, the condition is satisfied if both expressions match
within the same file.
.Sp
If the number provided is 0 (zero), the condition is satisfied if both
expressions match on the same line.
.Sp
A warning will be issued if the value given in the number position does not
appear to be numeric.
.IP "\fB\-\-xor\fR expr1 expr2 \fB\-\-end\-of\-xor\fR" 4
.IX Item "--xor expr1 expr2 --end-of-xor"
Match either of the two expressions, but not both. \fB\-\-end\-of\-xor\fR is optional.
.RE
.RS 4
.RE
.Sh "Negated Regular Expressions"
.IX Subsection "Negated Regular Expressions"
Regular expressions can be negated, by being prefixed with '!', and using the
\&'/' quote characters around the expression, such as:
.PP
.Vb 1
\&    !/expr/
.Ve
.PP
This has the effect of \*(L"match anything other than this\*(R". For a single
expression, this is no different than the \-v/\-\-invert\-match option, but it can
be useful in complex expressions, such as:
.PP
.Vb 1
\&    --and 0 this '!/that/'
.Ve
.PP
which means \*(L"match and line that has \*(R"this\*(L", but not \*(R"that".
.SH "HIGHLIGHTING"
.IX Header "HIGHLIGHTING"
Matching patterns and file names can be highlighted using \s-1ANSI\s0 escape sequences.
Both the foreground and the background colors may be specified, from the
following:
.PP
.Vb 8
\&    black
\&    blue
\&    cyan
\&    green
\&    magenta
\&    red
\&    white
\&    yellow
.Ve
.PP
The foreground may have any number of the following modifiers applied:
.PP
.Vb 6
\&    blink
\&    bold
\&    concealed
\&    reverse
\&    underline
\&    underscore
.Ve
.PP
The format is \*(L"\s-1MODIFIERS\s0 \s-1FOREGROUND\s0 on \s-1BACKGROUND\s0\*(R". For example:
.PP
.Vb 5
\&    red
\&    black on yellow                    (the default for patterns)
\&    reverse bold                       (the default for file names)
\&    green on white
\&    bold underline red on cyan
.Ve
.PP
By default text is highlighted as black on yellow. File names are written in
reversed bold text.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "Basic Usage"
.IX Subsection "Basic Usage"
.RS 4
.IP "\fB% glark format *.h\fR" 4
.IX Item "% glark format *.h"
Searches for \*(L"format\*(R" in the local .h files.
.IP "\fB% glark \-\-ignore\-case format *.h\fR" 4
.IX Item "% glark --ignore-case format *.h"
Searches for \*(L"format\*(R" without regard to case. Short form:
    % glark \-i format *.h
.IP "\fB% glark \-\-context=6 format *.h\fR" 4
.IX Item "% glark --context=6 format *.h"
Produces 6 lines of context around any match for \*(L"format\*(R". Short forms:
    % glark \-C 6 format *.h
    % glark \-6 format *.h
.IP "\fB% glark \-\-exclude\-matching Object *.java\fR" 4
.IX Item "% glark --exclude-matching Object *.java"
Find references to \*(L"Object\*(R", excluding the files whose names match \*(L"Object\*(R".
Thus, SessionBean.java would be searched; EJBObject.java would not. Short form:
    % glark \-M Object *.java
.IP "\fB% glark \-\-grep \-\-extract\-matches '\ew+\e.printStackTrace\e(.*\e)' *.java\fR" 4
.IX Item "% glark --grep --extract-matches 'w+.printStackTrace)' *.java"
Show where exceptions are dumped. Note that the \f(CW\*(C`\-\-grep\*(C'\fR option is used, thus
turning off highlighting and display of file names. If the \f(CW\*(C`\-\-no\-filename\*(C'\fR
option is used, the output will consist of only the matching portions. The short
form of this command is:
    % glark \-gy '\ew+\e.printStackTrace\e(.*\e)' *.java
.IP "\fB% glark \-\-grep \-\-extract\-matches '(\ew+)\e.printStackTrace\e(.*\e)' *.java\fR" 4
.IX Item "% glark --grep --extract-matches '(w+).printStackTrace)' *.java"
Show only the variable name of exceptions that are dumped. Short form:
    % glark \-gy '(\ew+)\e.printStackTrace\e(.*\e)' *.java
.IP "\fB% who | glark \-gy '^(\eS+)\es+\eS+\es*May 15'\fR" 4
.IX Item "% who | glark -gy '^(S+)s+S+s*May 15'"
Display only the names of users who logged in today.
.IP "\fB% glark \-l '\eb\ew{25,}\eb' *.txt\fR" 4
.IX Item "% glark -l 'bw{25,}b' *.txt"
Display (only) the names of the text files that contain \*(L"words\*(R" at least 25
characters long.
.ie n .IP "\fB% glark \-\-files\-without\-match '""\ew+""'\fR" 4
.el .IP "\fB% glark \-\-files\-without\-match '``\ew+'''\fR" 4
.IX Item "% glark --files-without-match 'w+'"
Display (only) the names of the files that do not contain strings consisting of
a single word. Short form:
    % glark \-L '\*(L"\ew+\*(R"'
.ie n .IP "\fB% for i in *.jar; do jar tvf \fB$i\fB | glark \-\-LABEL=$i Exception\fR" 4
.el .IP "\fB% for i in *.jar; do jar tvf \f(CB$i\fB | glark \-\-LABEL=$i Exception\fR" 4
.IX Item "% for i in *.jar; do jar tvf $i | glark --LABEL=$i Exception"
Display (only) the names of the files that do not contain strings consisting of
a single word. Short form:
    % glark \-L '\*(L"\ew+\*(R"'
.RE
.RS 4
.RE
.Sh "Highlighting"
.IX Subsection "Highlighting"
.RS 4
.ie n .IP "\fB% glark \-\-text\-color ""red on white"" '\eb[[:digit:]]{5}\eb' *.c\fR" 4
.el .IP "\fB% glark \-\-text\-color ``red on white'' '\eb[[:digit:]]{5}\eb' *.c\fR" 4
.IX Item "% glark --text-color red on white 'b[[:digit:]]{5}b' *.c"
Display (in red text on a white background) occurrences of exactly 5 digits.
Short form:
    % glark \-T \*(L"red on white\*(R" '\eb\ed{5}\eb' *.c
.RE
.RS 4
.Sp
See the \s-1HIGHLIGHTING\s0 section for valid colors and modifiers.
.RE
.Sh "Complex Expressions"
.IX Subsection "Complex Expressions"
.RS 4
.IP "\fB% glark \-\-or format print *.h\fR" 4
.IX Item "% glark --or format print *.h"
Searches for either \*(L"printf\*(R" or \*(L"format\*(R". Short form:
    % glark \-o format print *.h
.IP "\fB% glark \-\-and 4 printf format *.c *.h\fR" 4
.IX Item "% glark --and 4 printf format *.c *.h"
Searches for both \*(L"printf\*(R" or \*(L"format\*(R" within 4 lines of each other. Short form:
    % glark \-a 4 printf format *.c *.h
.IP "\fB% glark \-\-context=3 \-\-and 0 printf format *.c\fR" 4
.IX Item "% glark --context=3 --and 0 printf format *.c"
Searches for both \*(L"printf\*(R" or \*(L"format\*(R" on the same line (\*(L"within 0 lines of each
other\*(R"). Three lines of context are displayed around any matches. Short form:
    % glark \-3 \-a 0 printf format *.c
.IP "\fB% glark \-8 \-i \-a 15 \-a 2 pthx '\e.\e.\e.' \-o 'va_\ew+t' die *.c\fR" 4
.IX Item "% glark -8 -i -a 15 -a 2 pthx '...' -o 'va_w+t' die *.c"
(In order of the options:) Produces 8 lines of context around case insensitive
matches of (\*(L"phtx\*(R" within 2 lines of '...' (literal)) within 15 lines of (either
\&\*(L"va_\ew+t\*(R" or \*(L"die\*(R").
.IP "\fB% glark \-\-and \-1 '#define\es+YIELD' '#define\es+dTHR' *.h\fR" 4
.IX Item "% glark --and -1 '#defines+YIELD' '#defines+dTHR' *.h"
Looks for \*(L"#define\es+YIELD\*(R" within the same file (\-1 == \*(L"infinite distance\*(R") of
\&\*(L"#define\es+dTHR\*(R". Short form:
    % glark \-a \-1 '#define\es+YIELD' '#define\es+dTHR' *.h
.RE
.RS 4
.RE
.Sh "Range Limiting"
.IX Subsection "Range Limiting"
.RS 4
.IP "\fB% glark \-\-before 50% cout *.cpp\fR" 4
.IX Item "% glark --before 50% cout *.cpp"
Find references to \*(L"cout\*(R", within the first half of the file. Short form:
    % glark \-b 50% cout *.cpp
.IP "\fB% glark \-\-after 20 cout *.cpp\fR" 4
.IX Item "% glark --after 20 cout *.cpp"
Find references to \*(L"cout\*(R", starting at the 20th line in the file. Short form:
    % glark \-b 50% cout *.cpp
.IP "\fB% glark \-\-range 20 50% cout *.cpp\fR" 4
.IX Item "% glark --range 20 50% cout *.cpp"
Find references to \*(L"cout\*(R", in the first half of the file, after the 20th line.
Short form:
    % glark \-R 20 50% cout *.cpp
.RE
.RS 4
.RE
.SH "\fBENVIRONMENT\fP"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1GLARKOPTS\s0\fR" 4
.IX Item "GLARKOPTS"
A string of whitespace-delimited options. Due to parsing constraints, should
probably not contain complex regular expressions.
.IP "\fB$HOME/.glarkrc\fR" 4
.IX Item "$HOME/.glarkrc"
A resource file, containing name/value pairs, separated by either ':' or '='.
The valid fields of a .glarkrc file are as follows, with example values:
.Sp
.Vb 11
\&    after-context:     1
\&    before-context:    6
\&    context:           5
\&    file-color:        blue on yellow
\&    highlight:         off
\&    ignore-case:       false
\&    quiet:             yes
\&    text-color:        bold reverse
\&    line-number-color: bold
\&    verbose:           false
\&    grep:              true
.Ve
.Sp
\&\*(L"yes\*(R" and \*(L"on\*(R" are synonymnous with \*(L"true\*(R". \*(L"no\*(R" and \*(L"off\*(R" signify \*(L"false\*(R".
.Sp
My ~/.glarkrc file is the following:
.Sp
.Vb 9
\&    file-color:   bold reverse
\&    text-color:   bold black on yellow
\&    context:      2
\&    highlight:    on
\&    verbose:      false
\&    ignore-case:  false
\&    quiet:        yes
\&    word:         false
\&    binary-files: without-match
.Ve
.IP "\fBlocal .glarkrc\fR" 4
.IX Item "local .glarkrc"
See the \fIlocal-config-files\fR field below:
.Sh "Fields"
.IX Subsection "Fields"
.IP "\fBafter-context\fR" 4
.IX Item "after-context"
See the \fI\-\-after\-context\fR option. Example, for 3 lines:
.Sp
.Vb 1
\&    after-context: 3
.Ve
.IP "\fBbefore-context\fR" 4
.IX Item "before-context"
See the \fI\-\-before\-context\fR option. Example, for 7 lines:
.Sp
.Vb 1
\&    before-context: 7
.Ve
.IP "\fBbinary-files\fR" 4
.IX Item "binary-files"
See the \fI\-\-binary\-files\fR option. Example, to skip binary files:
.Sp
.Vb 1
\&    binary-files: without-match
.Ve
.IP "\fBcontext\fR" 4
.IX Item "context"
See the \fI\-\-context\fR option, Example, for 2 lines before and after matches:
.Sp
.Vb 1
\&    context: 2
.Ve
.IP "\fBexpression\fR" 4
.IX Item "expression"
See the \fI\s-1EXPRESSION\s0\fR section. Example:
.Sp
.Vb 1
\&    expression: --or '^\es*public\es+class\es+\ew+' '^\es*\ew+\e(
.Ve
.IP "\fBfile-color\fR" 4
.IX Item "file-color"
See the \fI\-\-file\-color\fR option. Example for white on black:
.Sp
.Vb 1
\&    file-color: white on black
.Ve
.IP "\fBfilter\fR" 4
.IX Item "filter"
See the \fI\-\-filter\fR option. Example, to show the entire file:
.Sp
.Vb 1
\&    filter: false
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
See the \fI\-\-grep\fR option. Example, to run in grep mode:
.Sp
.Vb 1
\&    grep: true
.Ve
.IP "\fBhighlight\fR" 4
.IX Item "highlight"
See the \fI\-\-highlight\fR option. To turn off highlighting:
.Sp
.Vb 1
\&    highlight: false
.Ve
.IP "\fBignore-case\fR" 4
.IX Item "ignore-case"
See the \fI\-\-ignore\-case\fR option. To make matching case\-insensitive:
.Sp
.Vb 1
\&    ignore-case: true
.Ve
.IP "\fBknown-nontext-files\fR" 4
.IX Item "known-nontext-files"
The extensions of files that should be considered to always be nontext (binary).
If a file extension is not known, the file contents are examined for nontext
characters. Thus, setting this field can result in faster searches. Example:
.Sp
.Vb 1
\&    known-nontext-files: class exe dll com
.Ve
.Sp
See the \fIExclusion of Non-Text Files\fR section in \fI\s-1NOTES\s0\fR for the default
settings.
.IP "\fBknown-text-files\fR" 4
.IX Item "known-text-files"
The extensions of files that should be considered to always be text. See above
for more. Example:
.Sp
.Vb 1
\&    known-text-files: ini bat xsl xml
.Ve
.Sp
See the \fIExclusion of Non-Text Files\fR section in \fI\s-1NOTES\s0\fR for the default
settings.
.IP "\fBlocal-config-files\fR" 4
.IX Item "local-config-files"
By default, glark uses only the configuration file ~/.glarkrc. Enabling this
makes glark search upward from the current directory for the first .glarkrc
file.
.Sp
This can be used, for example, in a Java project, where .class files are binary,
versus a \s-1PHP\s0 project, where .class files are text:
.Sp
.Vb 1
\&    /home/me/.glarkrc
.Ve
.Sp
.Vb 1
\&        local-config-files: true
.Ve
.Sp
.Vb 1
\&    /home/me/projects/java/.glarkrc
.Ve
.Sp
.Vb 1
\&        known-nontext-files: class
.Ve
.Sp
.Vb 1
\&    /home/me/projects/php/.glarkrc
.Ve
.Sp
.Vb 1
\&        known-text-files: class
.Ve
.Sp
With this configuration, .class files will automatically be treated as binary
file in Java projects, and .class files will be treated as text. This can speed
up searches.
.Sp
Note that the configuration file ~/.glarkrc is read first, so the local
configuration file can override those settings.
.IP "\fBquiet\fR" 4
.IX Item "quiet"
See the \fI\-\-quiet\fR option.
.IP "\fBshow-break\fR" 4
.IX Item "show-break"
Whether to display breaks between sections, when displaying context. Example:
.Sp
.Vb 1
\&    show-break: true
.Ve
.Sp
By default, this is false.
.IP "\fBtext-color\fR" 4
.IX Item "text-color"
See the \fI\-\-text\-color\fR option. Example:
.Sp
.Vb 1
\&    text-color: bold blue on white
.Ve
.IP "\fBverbose\fR" 4
.IX Item "verbose"
See the \fI\-\-verbose\fR option. Example:
.Sp
.Vb 1
\&    verbose: true
.Ve
.IP "\fBverbosity\fR" 4
.IX Item "verbosity"
See the \fI\-\-verbosity\fR option. Example:
.Sp
.Vb 1
\&    verbosity: 4
.Ve
.SH "NOTES"
.IX Header "NOTES"
.Sh "Exclusion of Non-Text Files"
.IX Subsection "Exclusion of Non-Text Files"
Non-text files are automatically skipped, by taking a sample of the file and
checking for an excessive number of non-ASCII characters. For speed purposes,
this test is skipped for files whose suffixes are associated with text files:
.PP
.Vb 17
\&    c
\&    cpp
\&    css
\&    h
\&    f
\&    for
\&    fpp
\&    hpp
\&    html
\&    java
\&    mk
\&    php
\&    pl
\&    pm
\&    rb
\&    rbw
\&    txt
.Ve
.PP
Similarly, this test is also skipped for files whose suffixes are associated
with non-text (binary) files:
.PP
.Vb 16
\&    Z
\&    a
\&    bz2
\&    elc
\&    gif
\&    gz
\&    jar
\&    jpeg
\&    jpg
\&    o
\&    obj
\&    pdf
\&    png
\&    ps
\&    tar
\&    zip
.Ve
.PP
See the \fIknown\-(?:non)text\-files\fR field for denoting file name suffixes
to associate as text or nontext.
.Sh "Exit Status"
.IX Subsection "Exit Status"
The exit status is 0 if matches were found; 1 if no matches were found, and 2 if
there was an error. An inverted match (the \-v/\-\-invert\-match option) will result
in 1 for matches found, 0 for none found.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For regular expressions, the \f(CW\*(C`perlre\*(C'\fR man page.
.PP
Mastering Regular Expressions, by Jeffrey Friedl, published by O'Reilly.
.SH "CAVEATS"
.IX Header "CAVEATS"
\&\*(L"Unbalanced\*(R" leading and trailing slashes will result in those slashes being
included as characters in the regular expression. Thus, the following pairs are
equivalent:
.PP
.Vb 5
\&    /foo        "/foo"
\&    /foo\e/      "/foo/"
\&    /foo\e/i     "/foo/i"
\&    foo/        "foo/"
\&    foo/        "foo/"
.Ve
.PP
The code to detect nontext files assumes \s-1ASCII\s0, not Unicode.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeff Pace <jpace at incava dot org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, Jeff Pace. 
.PP
All Rights Reserved. This module is free software. It may be used, redistributed
and/or modified under the terms of the Lesser \s-1GNU\s0 Public License. See
http://www.gnu.org/licenses/lgpl.html for more information.
